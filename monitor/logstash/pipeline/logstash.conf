# Logstash Pipeline Configuration
# This file defines how logs flow through Logstash: Input -> Filter -> Output

# INPUT: Where logs come from
input {
  # HTTP input - for applications to send logs directly
  http {
    port => 5000
    codec => json
    add_field => { "input_type" => "http" }
  }
  
  # TCP input - for applications using TCP logging
  tcp {
    port => 5044
    codec => json_lines
    add_field => { "input_type" => "tcp" }
  }
  
  # File input - for reading log files (optional)
  # file {
  #   path => "/var/log/app/*.log"
  #   start_position => "beginning"
  #   codec => json
  #   add_field => { "input_type" => "file" }
  # }
}

# FILTER: How to process and transform logs
filter {
  # Parse JSON logs
  if [input_type] == "http" or [input_type] == "tcp" {
    # Already JSON, just add timestamp if missing
    if ![timestamp] {
      mutate {
        add_field => { "timestamp" => "%{@timestamp}" }
      }
    }
  }
  
  # Add application context
  mutate {
    add_field => { 
      "environment" => "development"
      "application" => "transcendence"
    }
  }
  
  # Parse log levels
  if [level] {
    mutate {
      lowercase => [ "level" ]
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "headers", "host" ]
  }
}

# OUTPUT: Where processed logs go
output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "transcendence-logs-%{+YYYY.MM.dd}"
    
    # Create index template for better field mapping
    template_name => "transcendence"
    template_pattern => "transcendence-logs-*"
    template => {
      "index_patterns" => ["transcendence-logs-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "message" => { "type" => "text" },
          "application" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}