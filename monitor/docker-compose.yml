version: '3.7'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      #- ./prometheus_config.yml:/etc/prometheus/prometheus_config.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - alertmanager
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./alert_manager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      #- grafana-storage:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - monitoring

  # Step 1: Elasticsearch - stores and indexes logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node      # Run as single node (good for development)
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Limit memory usage to 512MB
      - xpack.security.enabled=false    # Disable security for simplicity
    ports:
      - "9200:9200"  # REST API port
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring

  # Step 2: Kibana - web interface for viewing logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # Connect to Elasticsearch
    ports:
      - "5601:5601"  # Kibana web interface
    depends_on:
      - elasticsearch
    networks:
      - monitoring

  # Step 3: Logstash - processes and transforms logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline  # Pipeline configuration
      - ./logstash/config:/usr/share/logstash/config      # Service configuration
    ports:
      - "5044:5044"  # TCP input for logs
      - "5000:5000"  # HTTP input for logs  
      - "9600:9600"  # Logstash monitoring API
    depends_on:
      - elasticsearch
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
