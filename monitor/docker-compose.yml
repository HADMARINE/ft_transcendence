version: '3.7'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      #- ./prometheus_config.yml:/etc/prometheus/prometheus_config.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - alertmanager
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./alert_manager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      #- grafana-storage:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - monitoring

  # STEP 1) Elasticsearch -> stores and indexes logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node      # Run as single node (good for development)
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Limit memory usage to 512MB
      - xpack.security.enabled=false    # Disable security for simplicity
    ports:
      - "9200:9200"  # REST API port? 
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring

  # STEP 2) Kibana -> web interface for viewing logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - monitoring

  # STEP 3) Logstash -> processes and transforms logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: logstash
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    ports:
      - "5000:5000" # HTTP input # expose Logstashâ€™s HTTP input -> any HTTP client (curl, app, Postman) can POST JSON to http://localhost:5000
      - "5044:5044" # TCP input (beats/tcp) # expose TCP input -> programs speaking plain newline-delimited JSON over TCP can send logs to Logstash at port 5044
    depends_on:
      - elasticsearch
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - monitoring

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.0
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs/transcendence:/var/log/transcendence:ro
    depends_on:
      - logstash
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local


#### QUICK NOTES #####

#depends_on: #dependencies (start after...)

#networks: 
# 1 Defines which Docker networks the container belongs to
# 2 All services on the monitoring network can communicate with each other using container names as hostnames
# 3 Isolates traffic from other containers and the host unless ports are explicitly exposed

#binding:
# -Port binding: HOST_PORT:CONTAINER_PORT allows outside traffic to reach the container.
# -Volume binding: HOST_PATH:CONTAINER_PATH allows host files to be accessed and modified by the container, or container data to persist outside the container.


# environment: Configure container runtime variables.
# volumes: Persist data or map configs.
# ports: Expose container services to the host.
# command: Customize container startup behavior.
# depends_on: Define startup order dependencies.
# networks: Control inter-service communication and isolation.
# binding: Links host resources (ports or files) to container resources.
######################